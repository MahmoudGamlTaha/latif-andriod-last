package com.latifapp.latif.uiimport android.content.Intentimport android.os.Bundleimport android.os.Handlerimport android.os.Looperimport android.util.Logimport android.view.WindowManagerimport androidx.appcompat.app.AppCompatActivityimport androidx.appcompat.app.AppCompatDelegateimport com.fujiyuu75.sequent.Animationimport com.fujiyuu75.sequent.Directionimport com.fujiyuu75.sequent.Sequentimport com.latifapp.latif.Rimport com.latifapp.latif.ui.auth.login.LoginActivityimport com.latifapp.latif.utiles.AppConstantsimport com.latifapp.latif.utiles.GpsUtilsimport com.latifapp.latif.utiles.Permissionsclass SplashActivity : AppCompatActivity() {    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        setContentView(R.layout.activity_splash)        window.setFlags(            WindowManager.LayoutParams.FLAG_LAYOUT_NO_LIMITS,            WindowManager.LayoutParams.FLAG_LAYOUT_NO_LIMITS        )        Sequent            .origin(findViewById(R.id.logo))            .duration(1500) // option.            .flow(Direction.RANDOM) // option. Flow of animations in (FORWARD/BACKWARD/RANDOM).            .anim(this, Animation.BOUNCE_IN)            .start()        turnGPSOn()        // intent    }    private fun intentToNextPage() {        Handler(Looper.getMainLooper()).postDelayed({            /* Create an Intent that will start the Menu-Activity. */            startActivity(Intent(this@SplashActivity, LoginActivity::class.java))            finish()        }, 3000)    }    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {        super.onActivityResult(requestCode, resultCode, data)        if (resultCode == RESULT_OK && requestCode == AppConstants.GPS_REQUEST) {            intentToNextPage() // flag maintain before get location        } else turnGPSOn()    }    override fun onRequestPermissionsResult(        requestCode: Int,        permissions: Array<out String>,        grantResults: IntArray    ) {        super.onRequestPermissionsResult(requestCode, permissions, grantResults)        turnGPSOn()    }    private fun turnGPSOn() {        if (!Permissions.checkLocationPermissions(this)) {            Permissions.showPermissionsDialog(                this,                "Request Location permission Is Needed",                Permissions.locationManifestPermissionsList,                0            )        } else            GpsUtils(this).turnGPSOn { isGPSEnable, mlocation -> // turn on GPS                if (isGPSEnable) intentToNextPage()            }    }}