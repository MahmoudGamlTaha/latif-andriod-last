package com.service.khdmaa.ui.splashimport android.app.PendingIntentimport android.content.Intentimport android.os.Bundleimport android.os.Handlerimport android.os.Looperimport android.view.LayoutInflaterimport android.view.WindowManagerimport android.widget.Toastimport com.fujiyuu75.sequent.Animationimport com.fujiyuu75.sequent.Directionimport com.fujiyuu75.sequent.Sequentimport com.service.khdmaa.Rimport com.service.khdmaa.data.models.MsgNotificationimport com.service.khdmaa.databinding.ActivitySplashBindingimport com.service.khdmaa.ui.base.BaseActivityimport com.service.khdmaa.ui.main.chat.chatPage.ChatPageActivityimport com.service.khdmaa.ui.main.chat.chatPage.ChatPageActivity_GeneratedInjectorimport com.service.khdmaa.ui.main.home.MainActivityimport com.service.khdmaa.utiles.GpsUtilsimport com.service.khdmaa.utiles.Permissionsimport com.service.khdmaa.utiles.Utilesimport dagger.hilt.android.AndroidEntryPoint@AndroidEntryPointclass SplashActivity : BaseActivity<SplashViewModel,ActivitySplashBinding>() {    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        Utiles.setLocalization(this, lang)        window.setFlags(            WindowManager.LayoutParams.FLAG_LAYOUT_NO_LIMITS,            WindowManager.LayoutParams.FLAG_LAYOUT_NO_LIMITS        )        Sequent            .origin(findViewById(R.id.logo))            .duration(1500) // option.            .flow(Direction.RANDOM) // option. Flow of animations in (FORWARD/BACKWARD/RANDOM).            .anim(this, Animation.BOUNCE_IN)            .anim(this, Animation.ROTATE_IN)            .start()        // getIntent().getExtras()        turnGPSOn()        // intent    }    private fun checkChatNotification() : MsgNotification?{        if (intent.getStringExtra("chat_room") != null) {            title = intent.getStringExtra("sender_name")            val message = intent.getStringExtra("message")            val sender_avater = intent.getStringExtra("sender_avater").toString()            val prod_id = intent.getStringExtra("prod_id").toString()            val chat_room = intent.getStringExtra("chat_room")            val prod_name = intent.getStringExtra("prod_name")            val sender_id = intent.getStringExtra("sender_id")            val body = MsgNotification(                sender_name = title.toString(),                message = message.toString(),                sender_avater = sender_avater,                prod_id = prod_id,                chat_room = chat_room.toString(),                prod_name = prod_name,                sender_id = sender_id            )            return body        }        return null    }    private fun intentToNextPage() {        val notification:MsgNotification? = checkChatNotification()            Handler(Looper.getMainLooper()).postDelayed({                /* Create an Intent that will start the Menu-Activity. */                val mainActivityIntent = Intent(this@SplashActivity, MainActivity::class.java)              if(notification != null) {                  mainActivityIntent.putExtra("chat", notification)              }                startActivity(mainActivityIntent)                finish()            }, 3000)    }    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {        super.onActivityResult(requestCode, resultCode, data)         turnGPSOn()    }    override fun onRequestPermissionsResult(        requestCode: Int,        permissions: Array<out String>,        grantResults: IntArray    ) {        super.onRequestPermissionsResult(requestCode, permissions, grantResults)        turnGPSOn()    }    private fun turnGPSOn() {        if (!Permissions.checkLocationPermissions(this)) {            Permissions.showPermissionsDialog(                this,                "Request Location permission Is Needed",                Permissions.locationManifestPermissionsList,                0            )        }else if (!Permissions.checkCameraPermissions(this)) {            Permissions.showPermissionsDialog(                this,                "External Storage  Permission Is Needed",                Permissions.cameraManifestPermissionsList,                Permissions.galleryRequest            )        } else            GpsUtils(this).turnGPSOn { isGPSEnable, mlocation -> // turn on GPS                if (isGPSEnable) intentToNextPage()            }    }    override fun setBindingView(inflater: LayoutInflater): ActivitySplashBinding {        return ActivitySplashBinding.inflate(inflater)    }    override fun showLoader() {    }    override fun hideLoader() {    }}